// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Models.Classes;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Models.Classes.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Auth")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Auth = "A",
                            Password = "123123",
                            UserName = "huxx"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<string>("BillSequenceNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar");

                    b.Property<string>("BillSerialNo")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("Char");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("WebApp.Models.Classes.BillItem", b =>
                {
                    b.Property<int>("BillItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillItemId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillItemId");

                    b.HasIndex("BillId");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("WebApp.Models.Classes.CargoDetail", b =>
                {
                    b.Property<int>("CargoDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoDetailId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VarChar");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VarChar");

                    b.HasKey("CargoDetailId");

                    b.ToTable("CargoDetails");
                });

            modelBuilder.Entity("WebApp.Models.Classes.CargoTracking", b =>
                {
                    b.Property<int>("CargoTrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CargoTrackingId"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VarChar");

                    b.Property<string>("TrackingDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VarChar");

                    b.HasKey("CargoTrackingId");

                    b.ToTable("CargoTrackings");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Arıtma Cihazları"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Filtreler"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Kimyasal Ürünler"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Aksesuarlar"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.Cost", b =>
                {
                    b.Property<int>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VarChar");

                    b.HasKey("CostId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAdress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerCity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerDistrict")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerPassword")
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("CustomerUserName")
                        .HasMaxLength(20)
                        .HasColumnType("VarChar");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerAdress = "Kuştepe Mah. 1. Sok. No:5",
                            CustomerCity = "İstanbul",
                            CustomerDistrict = "Beşiktaş",
                            CustomerEmail = "ahmet.yilmaz@example.com",
                            CustomerName = "Ahmet",
                            CustomerPhone = "5551234567",
                            CustomerSurname = "Yılmaz"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerAdress = "Kocatepe Mah. 2. Cad. No:10",
                            CustomerCity = "Ankara",
                            CustomerDistrict = "Çankaya",
                            CustomerEmail = "elif.kaya@example.com",
                            CustomerName = "Elif",
                            CustomerPhone = "5552345678",
                            CustomerSurname = "Kaya"
                        },
                        new
                        {
                            CustomerId = 3,
                            CustomerAdress = "Alsancak Mah. 3. Sok. No:20",
                            CustomerCity = "İzmir",
                            CustomerDistrict = "Konak",
                            CustomerEmail = "mehmet.ozturk@example.com",
                            CustomerName = "Mehmet",
                            CustomerPhone = "5553456789",
                            CustomerSurname = "Öztürk"
                        },
                        new
                        {
                            CustomerId = 4,
                            CustomerAdress = "Bahripaşa Mah. 4. Cad. No:15",
                            CustomerCity = "Bursa",
                            CustomerDistrict = "Osmangazi",
                            CustomerEmail = "ayse.demir@example.com",
                            CustomerName = "Ayşe",
                            CustomerPhone = "5554567890",
                            CustomerSurname = "Demir"
                        },
                        new
                        {
                            CustomerId = 5,
                            CustomerAdress = "Yukarı Karaman Mah. 5. Sok. No:25",
                            CustomerCity = "Antalya",
                            CustomerDistrict = "Muratpaşa",
                            CustomerEmail = "ali.kara@example.com",
                            CustomerName = "Ali",
                            CustomerPhone = "5555678901",
                            CustomerSurname = "Kara"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Satış",
                            State = true
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Teknik Destek",
                            State = true
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Sekreter",
                            State = true
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Müdür",
                            State = true
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.Detail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<string>("DProductDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VarChar");

                    b.Property<string>("DProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.HasKey("DetailId");

                    b.ToTable("Details");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Fault", b =>
                {
                    b.Property<int>("FaultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaultId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("FaultId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StaffId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Installment", b =>
                {
                    b.Property<int>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallmentId"));

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InstallmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InstallmentIsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("InstallmentPaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.HasKey("InstallmentId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FirstInstallmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InstallmentCount")
                        .HasColumnType("int");

                    b.Property<int?>("InstallmentPeriodMonths")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PaidPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentTypeForDownPayment")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentCategoryId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WebApp.Models.Classes.PaymentCategory", b =>
                {
                    b.Property<int>("PaymentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentCategoryId"));

                    b.Property<string>("PaymentCategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.HasKey("PaymentCategoryId");

                    b.ToTable("PaymentCategories");

                    b.HasData(
                        new
                        {
                            PaymentCategoryId = 1,
                            PaymentCategoryName = "Cash"
                        },
                        new
                        {
                            PaymentCategoryId = 2,
                            PaymentCategoryName = "CreditCard"
                        },
                        new
                        {
                            PaymentCategoryId = 3,
                            PaymentCategoryName = "Installment"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceIntervalInMonths")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VarChar");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "PureWater",
                            CategoryId = 1,
                            MaintenanceIntervalInMonths = 12,
                            ProductImage = "reverse-osmosis.png",
                            ProductModel = "RO2024",
                            ProductName = "Reverse Osmosis Arıtma Cihazı",
                            PurchasePrice = 5000m,
                            SalePrice = 7500m,
                            State = true,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "CleanTech",
                            CategoryId = 1,
                            MaintenanceIntervalInMonths = 12,
                            ProductImage = "uv-purifier.png",
                            ProductModel = "UV2024",
                            ProductName = "UV Arıtma Cihazı",
                            PurchasePrice = 4000m,
                            SalePrice = 6000m,
                            State = true,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "FilterPro",
                            CategoryId = 2,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "carbon-filter.png",
                            ProductModel = "ACF2024",
                            ProductName = "Aktif Karbon Filtre",
                            PurchasePrice = 150m,
                            SalePrice = 250m,
                            State = true,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "WaterSafe",
                            CategoryId = 2,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "sediment-filter.png",
                            ProductModel = "SF2024",
                            ProductName = "Sediment Filtre",
                            PurchasePrice = 100m,
                            SalePrice = 200m,
                            State = true,
                            Stock = 80
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "MineralPlus",
                            CategoryId = 3,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "mineral-cartridge.png",
                            ProductModel = "MC2024",
                            ProductName = "Mineral Ekleme Kartuşu",
                            PurchasePrice = 200m,
                            SalePrice = 300m,
                            State = true,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "OzoneMax",
                            CategoryId = 3,
                            MaintenanceIntervalInMonths = 12,
                            ProductImage = "ozone-generator.png",
                            ProductModel = "OZ2024",
                            ProductName = "Ozon Jeneratörü",
                            PurchasePrice = 700m,
                            SalePrice = 1000m,
                            State = true,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "TripleGuard",
                            CategoryId = 2,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "triple-filter-set.png",
                            ProductModel = "TS2024",
                            ProductName = "Üç Aşamalı Filtre Seti",
                            PurchasePrice = 350m,
                            SalePrice = 500m,
                            State = true,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "SaltClear",
                            CategoryId = 2,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "salt-water-cartridge.png",
                            ProductModel = "SC2024",
                            ProductName = "Tuzlu Su Arıtma Kartuşu",
                            PurchasePrice = 250m,
                            SalePrice = 350m,
                            State = true,
                            Stock = 45
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "CleanKit",
                            CategoryId = 4,
                            MaintenanceIntervalInMonths = 6,
                            ProductImage = "filter-cleaning-kit.png",
                            ProductModel = "FK2024",
                            ProductName = "Filtre Temizlik Kiti",
                            PurchasePrice = 80m,
                            SalePrice = 120m,
                            State = true,
                            Stock = 75
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "PartsPlus",
                            CategoryId = 4,
                            MaintenanceIntervalInMonths = 12,
                            ProductImage = "spare-parts-set.png",
                            ProductModel = "PS2024",
                            ProductName = "Yedek Parça Seti",
                            PurchasePrice = 150m,
                            SalePrice = 200m,
                            State = true,
                            Stock = 35
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.SaleTransaction", b =>
                {
                    b.Property<int>("SaleTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleTransactionId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("StockAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleTransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("StaffId");

                    b.ToTable("SaleTransactions");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("StaffFullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("StaffImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffMail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("StaffPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.HasKey("StaffId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            DepartmentId = 1,
                            StaffFullName = "Seda Çelik",
                            StaffImage = "seda-celik.png",
                            StaffMail = "sedac",
                            StaffPassword = "password1"
                        },
                        new
                        {
                            StaffId = 2,
                            DepartmentId = 2,
                            StaffFullName = "Emre Yurt",
                            StaffImage = "emre-yurt.png",
                            StaffMail = "emrey",
                            StaffPassword = "password2"
                        },
                        new
                        {
                            StaffId = 3,
                            DepartmentId = 2,
                            StaffFullName = "Zeynep Akman",
                            StaffImage = "zeynep-akman.png",
                            StaffMail = "zeynepa",
                            StaffPassword = "password3"
                        },
                        new
                        {
                            StaffId = 4,
                            DepartmentId = 3,
                            StaffFullName = "Caner Erol",
                            StaffImage = "caner-erol.png",
                            StaffMail = "canere",
                            StaffPassword = "password4"
                        },
                        new
                        {
                            StaffId = 5,
                            DepartmentId = 1,
                            StaffFullName = "Merve Arslan",
                            StaffImage = "merve-arslan.png",
                            StaffMail = "mervea",
                            StaffPassword = "password5"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.TechnicalCategory", b =>
                {
                    b.Property<int>("TechnicalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicalCategoryId"));

                    b.Property<string>("TechnicalCategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.HasKey("TechnicalCategoryId");

                    b.ToTable("TechnicalCategories");

                    b.HasData(
                        new
                        {
                            TechnicalCategoryId = 1,
                            TechnicalCategoryName = "Kurulum"
                        },
                        new
                        {
                            TechnicalCategoryId = 2,
                            TechnicalCategoryName = "Bakım"
                        },
                        new
                        {
                            TechnicalCategoryId = 3,
                            TechnicalCategoryName = "Onarım"
                        });
                });

            modelBuilder.Entity("WebApp.Models.Classes.TechnicalSupport", b =>
                {
                    b.Property<int>("TechnicalSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicalSupportId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VarChar");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("TransactionFee")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TechnicalSupportId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TechnicalCategoryId");

                    b.ToTable("TechnicalSupports");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Todo", b =>
                {
                    b.Property<int>("ToDoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToDoID"));

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("TodoDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VarChar");

                    b.HasKey("ToDoID");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("WebApp.Models.Classes.BillItem", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Fault", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Customer", "Customer")
                        .WithMany("Faults")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebApp.Models.Classes.Product", "Product")
                        .WithMany("Faults")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApp.Models.Classes.Staff", "Staff")
                        .WithMany("Faults")
                        .HasForeignKey("StaffId");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Installment", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Payment", "Payment")
                        .WithMany("Installments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Payment", b =>
                {
                    b.HasOne("WebApp.Models.Classes.PaymentCategory", "PaymentCategory")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentCategory");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Product", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApp.Models.Classes.SaleTransaction", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Customer", "Customer")
                        .WithMany("SaleTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Classes.Payment", "Payment")
                        .WithOne("SaleTransaction")
                        .HasForeignKey("WebApp.Models.Classes.SaleTransaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Classes.Product", "Product")
                        .WithMany("SaleTransactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Classes.Staff", "Staff")
                        .WithMany("SaleTransactions")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Product");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Staff", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Department", "Department")
                        .WithMany("Staffs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WebApp.Models.Classes.TechnicalSupport", b =>
                {
                    b.HasOne("WebApp.Models.Classes.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WebApp.Models.Classes.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApp.Models.Classes.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("WebApp.Models.Classes.TechnicalCategory", "TechnicalCategory")
                        .WithMany("TechnicalSupports")
                        .HasForeignKey("TechnicalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Staff");

                    b.Navigation("TechnicalCategory");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Bill", b =>
                {
                    b.Navigation("BillItems");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Customer", b =>
                {
                    b.Navigation("Faults");

                    b.Navigation("SaleTransactions");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Department", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Payment", b =>
                {
                    b.Navigation("Installments");

                    b.Navigation("SaleTransaction")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Classes.PaymentCategory", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Product", b =>
                {
                    b.Navigation("Faults");

                    b.Navigation("SaleTransactions");
                });

            modelBuilder.Entity("WebApp.Models.Classes.Staff", b =>
                {
                    b.Navigation("Faults");

                    b.Navigation("SaleTransactions");
                });

            modelBuilder.Entity("WebApp.Models.Classes.TechnicalCategory", b =>
                {
                    b.Navigation("TechnicalSupports");
                });
#pragma warning restore 612, 618
        }
    }
}
